#!/usr/bin/python

"""
    cues - Utility that splits one huge file into single files using a CUE sheet.

    Copyright (C) 2019 Vadim Kuznetsov <vimusov@gmail.com>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

from argparse import ArgumentParser
from dataclasses import dataclass
from enum import Enum, unique
from logging import INFO as LL_INFO, basicConfig, getLogger
from pathlib import Path
from subprocess import check_call
from typing import NoReturn, Optional
from wave import Wave_read, Wave_write, _wave_params


@dataclass(frozen=False)
class Track:
    title: Optional[str]
    offset: int
    length: int


@unique
class Codec(Enum):
    APE = '.ape'
    FLAC = '.flac'
    WAV = '.wav'
    WavPack = '.wv'


log = getLogger(__name__)


def _parse_cue_file(cue_sheet: str, wav_params: _wave_params) -> list[Track]:
    def unquote(value: str) -> str:
        value = value.replace(r'\"', '"')
        value = value.replace(r"\'", "'")
        value = value.replace('/', ' ')
        value = value.replace('\\', ' ')
        value = value.strip('"')
        return ' '.join(value.split()) if ' ' in value else value

    lines = [line.strip() for line in cue_sheet.splitlines()]
    tracks = []
    while lines:
        line = lines.pop(0)
        if not line:
            continue
        header, *parts = line.split()
        if header != 'TRACK':
            continue
        title = None
        while lines:
            line = lines.pop(0)
            if not line:
                continue
            header, *parts = line.split(None)
            if header == 'TITLE':
                title = unquote(' '.join(parts))
            if header != 'INDEX':
                continue
            index_no, end_position = parts
            if int(index_no) != 1:
                continue
            minutes, seconds, frames = tuple(map(int, end_position.split(':')))
            offset = (60 * minutes * wav_params.framerate) + (seconds * wav_params.framerate) + frames
            if tracks:
                track = tracks[-1]
                track.length = offset - track.offset - 1
                tracks.append(Track(title=title, offset=offset, length=0))
                break
            else:
                tracks.append(Track(title=title, offset=0, length=0))
                continue
    track = tracks[-1]
    track.length = wav_params.nframes - track.offset
    return tracks


def main():
    parser = ArgumentParser()
    parser.add_argument('-s', '--snd_path', default=None, type=Path, help='A sound file.')
    parser.add_argument('cue_path', type=Path, help='A file with CUE sheet.')
    args = parser.parse_args()

    basicConfig(level=LL_INFO, format='%(levelname)s: %(message)s')

    def panic(*log_args) -> NoReturn:
        log.critical(*log_args)
        exit(1)

    cue_path: Path = args.cue_path.resolve()

    for codec in Codec:
        snd_path = cue_path.parent / f'{cue_path.stem}{codec.value}'
        if snd_path.is_file():
            log.info("Found sound file '%s'.", snd_path.name)
            break
    else:
        if (snd_path := args.snd_path) is None:
            panic('Unable to detect sound file, try to set it manually.')

    try:
        codec = Codec(snd_path.suffix)
    except ValueError:
        panic(f"Unsupported codec '{snd_path.suffix}'.")

    wav_path = snd_path.parent / f'{snd_path.stem}.wav'
    match codec:
        case Codec.APE:
            decoder_args = ['mac', snd_path, wav_path, '-d']
        case Codec.FLAC:
            decoder_args = ['flac', '-d', '-o', wav_path, snd_path]
        case Codec.WAV:
            decoder_args = None
        case Codec.WavPack:
            decoder_args = ['wvunpack', '-w', '-o', wav_path, snd_path]
        case _:
            raise ValueError(f'Unexpected codec value {codec!r}:')

    content = cue_path.read_bytes()
    try:
        cue_sheet = content.decode('utf-8')
    except UnicodeDecodeError:
        cue_sheet = content.decode('cp1251')

    if decoder_args is not None:
        log.info("Decoding file '%s' using codec %s.", snd_path.name, codec.name)
        check_call(list(map(str, decoder_args)))

    with Wave_read(str(wav_path)) as in_wav:
        params = in_wav.getparams()
        tracks = _parse_cue_file(cue_sheet, params)
        log.info("Splitting file '%s' into %d single files.", wav_path.name, len(tracks))
        for track_no, track in enumerate(tracks, start=1):
            out_wav_path = cue_path.parent / f'{track_no:02d} - {track.title or "Untitled"}.wav'
            if out_wav_path.exists():
                log.warning("File '%s' is already exist, skipping it.", out_wav_path.name)
                continue
            log.info("Storing '%s'.", out_wav_path.name)
            with Wave_write(str(out_wav_path)) as out_wav:
                out_wav.setparams(params)
                in_wav.setpos(track.offset)
                frames = in_wav.readframes(track.length)
                out_wav.writeframes(frames)

    if snd_path != wav_path:
        log.info("Removing temporary file '%s'.", wav_path.name)
        wav_path.unlink()

    log.info('Splitting has been completed successfully.')


if __name__ == '__main__':
    main()
